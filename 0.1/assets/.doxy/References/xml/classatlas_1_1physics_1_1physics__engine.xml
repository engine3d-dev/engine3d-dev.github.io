<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classatlas_1_1physics_1_1physics__engine" kind="class" language="C++" prot="public">
    <compoundname>atlas::physics::physics_engine</compoundname>
    <includes refid="physics__engine_8hpp" local="no">physics_engine.hpp</includes>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Used for indicating whether objects in a given scene are static or dynamic (meaning can collide with other objects) </para>
</simplesect>
<simplesect kind="note"><para>Used as a representation for both ObjectLayer(uint16_t) and BroadPhaseLayer(class) </para>
</simplesect>
<simplesect kind="note"><para>ObjectLayer just seems to be defined as a body type within joltphysics </para>
</simplesect>
<simplesect kind="note"><para>BroadPhaseLayer is just joltphysic&apos;s representation of a collider pretty much. It is mainly used by the jolt physics collision detection system that uses it. Typically in JoltPhysics you&apos;d have less of these then ObjectLayer&apos;s it seems</para>
</simplesect>
<simplesect kind="note"><para>BroadPhaseLayer can be ways to map multiple object layers (BodyType&apos;s)</para>
</simplesect>
<simplesect kind="note"><para>Physics settings per physic scene <verbatim>   @name PhysicSystem
   @note Wrapper around Jolt&apos;s API for initiating the physics system
   @note These are exmaples of the API&apos;s



   Physic Body
    - Will be a component purely containing the data that will be translated
   to Jolt
    - PhysicBody is a component that&apos;ll be added so when physic&apos;s enabled
   then we can use this component to work with basic physic properties. Like
   applying gravity


    PhysicSystem
        - Responsible for managing the physics objects
        - Responsible for handling per scene&apos;s physics setting
        - Each scene in itself will contain something called PhysicScene
        - PhysicScene will be overlayed on top of the scene. This is how
   that scene will have physics
            - We also want scenes to have independent physics settings so
   they are not using previous data from the other scene&apos;s physics
</verbatim> ! </para>
</simplesect>
<simplesect kind="note"><para>These are notes for myself on triggers. Just so I dont forget. Lets not think about this for the time being.</para>
</simplesect>
Here is an idea for handling triggering events</para>
<para>Utilize Event Dispatcher System</para>
<para>Example API&apos;s</para>
<para>Alternative #1</para>
<para>Idea behind this is we get our event dispatcher. Then we go ahead and submit a trigerred event when sphere activates that specific event IDEA: We need to figure out a way to target specific objects and how they are able to submit triggering events so the event system is aware it is happening auto dispatcher = event::get_event(); dispatcher.dispatch&lt;SphereTriggered&gt;(sphere_object); </para>
    </detaileddescription>
    <location file="TheAtlasEngine/atlas/physics/physics_3d/physics_engine.hpp" line="121" column="5" bodyfile="TheAtlasEngine/atlas/physics/physics_3d/physics_engine.hpp" bodystart="121" bodyend="121"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
