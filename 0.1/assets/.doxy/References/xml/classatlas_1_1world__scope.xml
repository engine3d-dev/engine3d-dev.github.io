<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classatlas_1_1world__scope" kind="class" language="C++" prot="public">
    <compoundname>atlas::world_scope</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; world_scope &gt;</basecompoundref>
    <includes refid="world_8hpp" local="no">world.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classatlas_1_1world__scope_1a63749578316a050be49488abb0a4b1b8" prot="private" static="no" mutable="no">
        <type>flecs::world</type>
        <definition>flecs::world atlas::world_scope::m_scene_registry</definition>
        <argsstring></argsstring>
        <name>m_scene_registry</name>
        <qualifiedname>atlas::world_scope::m_scene_registry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="104" column="22" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classatlas_1_1world__scope_1a7261d9fc631f4fc40a9249e4f59d167d" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="namespaceatlas_1ab3da5cb9c9a3e605fab407b9dad31db3" kindref="member">ref</ref>&lt; <ref refid="classatlas_1_1scene__scope" kindref="compound">scene_scope</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::string, ref&lt;scene_scope&gt; &gt; atlas::world_scope::m_scene_container</definition>
        <argsstring></argsstring>
        <name>m_scene_container</name>
        <qualifiedname>atlas::world_scope::m_scene_container</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should be managed by either octal-trees or some scene spatial data structure </para>
</simplesect>
<simplesect kind="note"><para>But not by using deque, TODO: Make changes to this to use diff data structures </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="109" column="18" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classatlas_1_1world__scope_1a6eba9df5dfc8923f88463726e2a0335a" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceatlas_1ab3da5cb9c9a3e605fab407b9dad31db3" kindref="member">ref</ref>&lt; <ref refid="classatlas_1_1world__scope" kindref="compound">world_scope</ref> &gt;</type>
        <definition>ref&lt;world_scope&gt; atlas::world_scope::m_world_shared_instance</definition>
        <argsstring></argsstring>
        <name>m_world_shared_instance</name>
        <qualifiedname>atlas::world_scope::m_world_shared_instance</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="111" column="13" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classatlas_1_1world__scope_1a334ad8b96e7a222fd23e3dba07d74123" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string atlas::world_scope::m_tag</definition>
        <argsstring></argsstring>
        <name>m_tag</name>
        <qualifiedname>atlas::world_scope::m_tag</qualifiedname>
        <initializer>= &quot;Undefined Tag&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="112" column="21" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classatlas_1_1world__scope_1a5c9246fefc0b374b6444dc8d63a61680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atlas::world_scope::world_scope</definition>
        <argsstring>()=default</argsstring>
        <name>world_scope</name>
        <qualifiedname>atlas::world_scope::world_scope</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="82" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1a730fb5583d4e13c5ffcb34b6e58e7cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atlas::world_scope::world_scope</definition>
        <argsstring>(const std::string &amp;p_tag)</argsstring>
        <name>world_scope</name>
        <qualifiedname>atlas::world_scope::world_scope</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>p_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="83" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1ab927db073657fb083505a620a85184ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atlas::world_scope::~world_scope</definition>
        <argsstring>()</argsstring>
        <name>~world_scope</name>
        <qualifiedname>atlas::world_scope::~world_scope</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="84" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1a7aab21bd4a0c9a5e94f5031af254bb35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string atlas::world_scope::get_tag</definition>
        <argsstring>() const</argsstring>
        <name>get_tag</name>
        <qualifiedname>atlas::world_scope::get_tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="86" column="22" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1ac9b7bd3d1f87e0940287b5dd36b2e5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::world_scope::add_scene</definition>
        <argsstring>(const ref&lt; scene_scope &gt; &amp;p_scene_context)</argsstring>
        <name>add_scene</name>
        <qualifiedname>atlas::world_scope::add_scene</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatlas_1ab3da5cb9c9a3e605fab407b9dad31db3" kindref="member">ref</ref>&lt; <ref refid="classatlas_1_1scene__scope" kindref="compound">scene_scope</ref> &gt; &amp;</type>
          <declname>p_scene_context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="88" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1a4f1645eedec6a7eb4756e59632981470" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceatlas_1ab3da5cb9c9a3e605fab407b9dad31db3" kindref="member">ref</ref>&lt; <ref refid="classatlas_1_1scene__scope" kindref="compound">scene_scope</ref> &gt;</type>
        <definition>ref&lt; scene_scope &gt; atlas::world_scope::get_scene</definition>
        <argsstring>(const std::string &amp;p_tag)</argsstring>
        <name>get_scene</name>
        <qualifiedname>atlas::world_scope::get_scene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>p_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="91" column="13" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1a928bfd6366267e61bd23a3715ab1160e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceatlas_1ab3da5cb9c9a3e605fab407b9dad31db3" kindref="member">ref</ref>&lt; <ref refid="classatlas_1_1world__scope" kindref="compound">world_scope</ref> &gt;</type>
        <definition>ref&lt; world_scope &gt; atlas::world_scope::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>atlas::world_scope::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="99" column="13" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classatlas_1_1world__scope_1aea7a55f7029670bb5bbcb26d33865cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>atlas::world_scope::operator flecs::world &amp;</definition>
        <argsstring>()</argsstring>
        <name>operator flecs::world &amp;</name>
        <qualifiedname>atlas::world_scope::world &amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="101" column="9" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Lets rethink how <ref refid="classatlas_1_1world__scope" kindref="compound">world_scope</ref> gets created. </para>
    </briefdescription>
    <detaileddescription>
<para>The way this works is <ref refid="classatlas_1_1system__registry" kindref="compound">system_registry</ref> is going to essentially be how we register worlds</para>
<para>Only difference is we aren&apos;t constructing it like: register_to(this)</para>
<para>What WE are going to do is world_handler = system_registry::create(p_tag);</para>
<para>What this does is essentially creates a world scope inside your world that you want to create and the system registry will create, manage, and keep track of lifetimes of world_scopes </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>atlas::world_scope</label>
        <link refid="classatlas_1_1world__scope"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; world_scope &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>atlas::world_scope</label>
        <link refid="classatlas_1_1world__scope"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; world_scope &gt;</label>
      </node>
    </collaborationgraph>
    <location file="TheAtlasEngine/atlas/core/scene/world.hpp" line="80" column="5" bodyfile="TheAtlasEngine/atlas/core/scene/world.hpp" bodystart="80" bodyend="113"/>
    <listofallmembers>
      <member refid="classatlas_1_1world__scope_1ac9b7bd3d1f87e0940287b5dd36b2e5b3" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>add_scene</name></member>
      <member refid="classatlas_1_1world__scope_1a928bfd6366267e61bd23a3715ab1160e" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>get</name></member>
      <member refid="classatlas_1_1world__scope_1a4f1645eedec6a7eb4756e59632981470" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>get_scene</name></member>
      <member refid="classatlas_1_1world__scope_1a7aab21bd4a0c9a5e94f5031af254bb35" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>get_tag</name></member>
      <member refid="classatlas_1_1world__scope_1a7261d9fc631f4fc40a9249e4f59d167d" prot="private" virt="non-virtual"><scope>atlas::world_scope</scope><name>m_scene_container</name></member>
      <member refid="classatlas_1_1world__scope_1a63749578316a050be49488abb0a4b1b8" prot="private" virt="non-virtual"><scope>atlas::world_scope</scope><name>m_scene_registry</name></member>
      <member refid="classatlas_1_1world__scope_1a334ad8b96e7a222fd23e3dba07d74123" prot="private" virt="non-virtual"><scope>atlas::world_scope</scope><name>m_tag</name></member>
      <member refid="classatlas_1_1world__scope_1a6eba9df5dfc8923f88463726e2a0335a" prot="private" virt="non-virtual"><scope>atlas::world_scope</scope><name>m_world_shared_instance</name></member>
      <member refid="classatlas_1_1world__scope_1aea7a55f7029670bb5bbcb26d33865cdd" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>operator flecs::world &amp;</name></member>
      <member refid="classatlas_1_1world__scope_1a5c9246fefc0b374b6444dc8d63a61680" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>world_scope</name></member>
      <member refid="classatlas_1_1world__scope_1a730fb5583d4e13c5ffcb34b6e58e7cf0" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>world_scope</name></member>
      <member refid="classatlas_1_1world__scope_1ab927db073657fb083505a620a85184ec" prot="public" virt="non-virtual"><scope>atlas::world_scope</scope><name>~world_scope</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
