<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceatlas_1_1vk" kind="namespace" language="C++">
    <compoundname>atlas::vk</compoundname>
    <innerclass refid="structatlas_1_1vk_1_1camera__ubo" prot="public">atlas::vk::camera_ubo</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1command__buffer__settings" prot="public">atlas::vk::command_buffer_settings</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1descriptor__binding__entry" prot="public">atlas::vk::descriptor_binding_entry</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1descriptor__binding__point" prot="public">atlas::vk::descriptor_binding_point</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1descriptor__set" prot="public">atlas::vk::descriptor_set</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1descriptor__set__layout" prot="public">atlas::vk::descriptor_set_layout</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1global__ubo" prot="public">atlas::vk::global_ubo</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1hud__data" prot="public">atlas::vk::hud_data</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1image__extent" prot="public">atlas::vk::image_extent</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1imgui__context" prot="public">atlas::vk::imgui_context</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1material__uniform" prot="public">atlas::vk::material_uniform</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1mesh" prot="public">atlas::vk::mesh</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1renderpass__attachment" prot="public">atlas::vk::renderpass_attachment</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1renderpass__options" prot="public">atlas::vk::renderpass_options</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1shader__info" prot="public">atlas::vk::shader_info</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1surface__properties" prot="public">atlas::vk::surface_properties</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1texture" prot="public">atlas::vk::texture</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1texture__extent" prot="public">atlas::vk::texture_extent</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1texture__properties" prot="public">atlas::vk::texture_properties</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vertex__attribute" prot="public">atlas::vk::vertex_attribute</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vertex__attribute__entry" prot="public">atlas::vk::vertex_attribute_entry</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vertex__input" prot="public">atlas::vk::vertex_input</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__buffer" prot="public">atlas::vk::vk_buffer</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__buffer__info" prot="public">atlas::vk::vk_buffer_info</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__command__buffer" prot="public">atlas::vk::vk_command_buffer</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__context" prot="public">atlas::vk::vk_context</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__driver" prot="public">atlas::vk::vk_driver</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__filter__range" prot="public">atlas::vk::vk_filter_range</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__graphics__queue" prot="public">atlas::vk::vk_graphics_queue</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__image" prot="public">atlas::vk::vk_image</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__image__handle" prot="public">atlas::vk::vk_image_handle</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__index__buffer" prot="public">atlas::vk::vk_index_buffer</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__physical__driver" prot="public">atlas::vk::vk_physical_driver</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__pipeline" prot="public">atlas::vk::vk_pipeline</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__present__queue" prot="public">atlas::vk::vk_present_queue</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__queue__options" prot="public">atlas::vk::vk_queue_options</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__renderer" prot="public">atlas::vk::vk_renderer</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__renderpass" prot="public">atlas::vk::vk_renderpass</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__renderpass__options" prot="public">atlas::vk::vk_renderpass_options</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__shader__group" prot="public">atlas::vk::vk_shader_group</innerclass>
    <innerclass refid="structatlas_1_1vk_1_1vk__shader__module" prot="public">atlas::vk::vk_shader_module</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__swapchain" prot="public">atlas::vk::vk_swapchain</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__uniform__buffer" prot="public">atlas::vk::vk_uniform_buffer</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__vertex__buffer" prot="public">atlas::vk::vk_vertex_buffer</innerclass>
    <innerclass refid="classatlas_1_1vk_1_1vk__window" prot="public">atlas::vk::vk_window</innerclass>
    <sectiondef kind="user-defined">
      <header>vk_present_queue</header>
      <description><para>index is the queue family index the queue belongs to</para>
<para>queue index in the specific queue family to retrieve </para>
</description>
      <memberdef kind="enum" id="vk__types_8hpp_1aac748941d95d3d1ae1dcf23a349b29c3" prot="public" static="no" strong="yes">
        <type>uint64_t</type>
        <name>format</name>
        <qualifiedname>atlas::vk::format</qualifiedname>
        <enumvalue id="vk__types_8hpp_1aac748941d95d3d1ae1dcf23a349b29c3a300b8af6eb45d7061fd5114c28fbbb2b" prot="public">
          <name>rgb32_sfloat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1aac748941d95d3d1ae1dcf23a349b29c3a4e869168053659ab24c0eab95b623404" prot="public">
          <name>rg32_sfloat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="107" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a7c5773c88ecb33ea399a25e8a5b9459d" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>buffer</name>
        <qualifiedname>atlas::vk::buffer</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a7c5773c88ecb33ea399a25e8a5b9459da6cd616921f870b09c8eafbe1a2b42ae1" prot="public">
          <name>uniform</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a7c5773c88ecb33ea399a25e8a5b9459da01752e85db42c45e88e02dc24a59f28b" prot="public">
          <name>storage</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a7c5773c88ecb33ea399a25e8a5b9459da773b1b17d5362fb7e6a4ae8009f45365" prot="public">
          <name>combined_image_sampler</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a7c5773c88ecb33ea399a25e8a5b9459da1775732c3abca4da3f767e816e93cf59" prot="public">
          <name>sampled_image</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="112" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a0acd0a8266ce5b6ec8c05ca9913a86c9" prot="public" static="no" strong="no">
        <type></type>
        <name>shader_stage</name>
        <qualifiedname>atlas::vk::shader_stage</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a0acd0a8266ce5b6ec8c05ca9913a86c9a41edf2c7d2165c8a64bd13e0cff8dfe6" prot="public">
          <name>undefined</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a0acd0a8266ce5b6ec8c05ca9913a86c9a37712b890ea1cea291d07a80a9628a58" prot="public">
          <name>vertex</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a0acd0a8266ce5b6ec8c05ca9913a86c9a81899057937e059e4f40170a40bd4d8d" prot="public">
          <name>fragment</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="119" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1ab01d47a65c59d613a37a91b6f8324091" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>input_rate</name>
        <qualifiedname>atlas::vk::input_rate</qualifiedname>
        <enumvalue id="vk__types_8hpp_1ab01d47a65c59d613a37a91b6f8324091a2b5bc093b09bd81f51de433bde9d202a" prot="public">
          <name>vertex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1ab01d47a65c59d613a37a91b6f8324091a7123a699d77db6479a1d8ece2c4f1c16" prot="public">
          <name>instance</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1ab01d47a65c59d613a37a91b6f8324091ad3e49871390000d968076db71d34990e" prot="public">
          <name>max_enum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Refers to the input rate. </para>
        </briefdescription>
        <detaileddescription>
<para>vertex - refers to most common rate. Indicates GPU to move next data entry (next vertex data) into a buffer for every single vertex that&apos;s processed.<itemizedlist>
<listitem><para>Used for vertex attributes that change per vertex on the mesh</para>
</listitem><listitem><para>vertex attribute-only data</para>
</listitem><listitem><para>Per-object based specification in the next data entry</para>
</listitem></itemizedlist>
</para>
<para>instance - refers to data entry per-instance. Specifying to the GPU that the data entry in the buffer is to be after the instance of the object itself.<itemizedlist>
<listitem><para>Typically used for instanced rendering. Specfying next entry of data to be after instanced drawn, could be shared. Therefore instance is an option to choose from if vertex data is across as a per-instance basis.</para>
</listitem></itemizedlist>
</para>
<para>instance-based specification next data entry </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="141" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>image_layout</name>
        <qualifiedname>atlas::vk::image_layout</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2a5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2a958153f1b8b96ec4c4eb2147429105d9" prot="public">
          <name>general</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2a48c2c3f2e371ec301dfffb305f1a4ae6" prot="public">
          <name>color_optimal</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2a990578f546bf98a0810923da81b19863" prot="public">
          <name>depth_stencil_optimal</name>
          <initializer>=
          3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a69c3bd869e57710d39fa467e7cc2d0d2a800feefc2e64568eaaebb04a7bf4f66d" prot="public">
          <name>depth_stencil_read_only_optimal</name>
          <initializer>=
          4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="143" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17a" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>sample_bit</name>
        <qualifiedname>atlas::vk::sample_bit</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aabe20fe3083a1479c72884610290dd452" prot="public">
          <name>count_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aa8412c4926f09e26fa0b885560429876a" prot="public">
          <name>count_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aad78bc444e226c11bf73a13c99c93dd48" prot="public">
          <name>count_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aa775cc7a7ddf21a55ce383b616651c926" prot="public">
          <name>count_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aa26916321bc927c1ada90fefdcba5074e" prot="public">
          <name>count_16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aa2e2f6e74b304091c5f655fa855ac8bfe" prot="public">
          <name>count_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aacc1a74f38ca846adc13264465da30802" prot="public">
          <name>count_64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a52c3a0080e514a2521d62fe80fe2d17aad3e49871390000d968076db71d34990e" prot="public">
          <name>max_enum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Equivalent to doing VkSampleCountFlagBits but simplified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="154" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="154" bodyend="163"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99a" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>attachment_load</name>
        <qualifiedname>atlas::vk::attachment_load</qualifiedname>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aaec4d1eb36b22d19728e9d1d23ca84d1c" prot="public">
          <name>load</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aa01bc6f8efa4202821e95f4fdf6298b30" prot="public">
          <name>clear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aabe7bbe0cf3947e795861f1fa966bab58" prot="public">
          <name>dont_care</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aac6632d201fae57e53acfea988cf5c8b7" prot="public">
          <name>none_khr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aa139756d6395032ded75bc445a409cb70" prot="public">
          <name>none_ext</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1af7ea67b57378e84cd795a2806146b99aad3e49871390000d968076db71d34990e" prot="public">
          <name>max_enum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Equivalent to VkAttachmentLoadOp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="166" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fc" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>attachment_store</name>
        <qualifiedname>atlas::vk::attachment_store</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fca8cd892b7b97ef9489ae4479d3f4ef0fc" prot="public">
          <name>store</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fcabe7bbe0cf3947e795861f1fa966bab58" prot="public">
          <name>dont_care</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fcac6632d201fae57e53acfea988cf5c8b7" prot="public">
          <name>none_khr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fca2f50d9194a1034494023fa5411f6a2c2" prot="public">
          <name>none_qcom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fca139756d6395032ded75bc445a409cb70" prot="public">
          <name>none_ext</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a42659e3c0bfddebb41a77e04328c77fcad3e49871390000d968076db71d34990e" prot="public">
          <name>max_enum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Equivalent to VkAttachmentStoreOp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="176" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>pipeline_bind_point</name>
        <qualifiedname>atlas::vk::pipeline_bind_point</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7a73b0472d43069103642ffa07997ff20a" prot="public">
          <name>graphics</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7a77e73f3a185e16d1f08ca5e057710b9d" prot="public">
          <name>compute</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7a982b0f479aabf57e26127b5ce93646bb" prot="public">
          <name>ray_tracing_khr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7a016c96e7d0b61dc12f97dc2a0b0834f9" prot="public">
          <name>subpass_shading_hauwei</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7a4dba8b6f86d67d07aaff8e511015888a" prot="public">
          <name>ray_tracing_nv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a1cf351d29bc5686a6b5413919f3835e7ad3e49871390000d968076db71d34990e" prot="public">
          <name>max_enum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Equivalent to VkPipelineBindPoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="186" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="enum" id="vk__types_8hpp_1a26549226c078501cb5b66d347055e17f" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>renderpass_type</name>
        <qualifiedname>atlas::vk::renderpass_type</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a26549226c078501cb5b66d347055e17fa70dda5dfb8053dc6d1c492574bce9bfd" prot="public">
          <name>color</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a26549226c078501cb5b66d347055e17fa12a055bf01a31369fe81ac35d85c7bc1" prot="public">
          <name>depth</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>this is the expectation of specifying the renderpass attachments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="223" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>transition_image_layout</header>
      <description><para>Records and executes vkCmdCopyBufferToImage vulkan function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VkImage</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image we want to transition to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VkFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>specifying the format in which are image has been set to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_old</parametername>
</parameternamelist>
<parameterdescription>
<para>is a VkImageLayout that is the old layout image was previously </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_new</parametername>
</parameternamelist>
<parameterdescription>
<para>is VkImageLayout that is the new layout the image will be transitioning to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Used for transitioning between a given set of image layouts into a completely different layout</para>
<para>Helpful for ensuring the pixel data the image contains</para>
<para>This function creates a copy command buffer</para>
<para>Meaning it should accept a created command buffer from the user rather than constructing one itself </para>
</description>
      <memberdef kind="function" id="utils_8hpp_1a43106bea6b80817adfbd62bcfdec5816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::transition_image_layout</definition>
        <argsstring>(VkImage &amp;p_image, VkFormat p_format, VkImageLayout p_old, VkImageLayout p_new)</argsstring>
        <name>transition_image_layout</name>
        <qualifiedname>atlas::vk::transition_image_layout</qualifiedname>
        <param>
          <type>VkImage &amp;</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_old</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_new</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="69" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a32e93041154d5ff7dbac853762a992a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::transition_image_layout</definition>
        <argsstring>(VkCommandBuffer &amp;p_command_buffer, VkImage &amp;p_image, VkFormat p_format, VkImageLayout p_old, VkImageLayout p_new)</argsstring>
        <name>transition_image_layout</name>
        <qualifiedname>atlas::vk::transition_image_layout</qualifiedname>
        <param>
          <type>VkCommandBuffer &amp;</type>
          <declname>p_command_buffer</declname>
        </param>
        <param>
          <type>VkImage &amp;</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_old</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_new</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="91" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="91" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>image_memory_barrier</header>
      <description><para>pipeline barriers are generally used to synchronize access to resources.</para>
<para>Ensuring that writing to a buffer completes before reading from it, but also used when transitioning image layouts and transfer queue&apos;s family ownership when VK_SHARING_MODE_EXCLUSIVE is used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VkCommandBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>is the command buffer we are executing after recording this operation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VkImage</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image that will use our image we are transitioning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VkFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the format of pixel data has been loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_old</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image layout currently defined with the VkImage </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_new</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image layout that we are going to be modifying the VkImage into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function creates a copy command buffer</para>
<para>Meaning it should accept a created command buffer from the user rather than constructing one itself </para>
</description>
      <memberdef kind="function" id="utils_8hpp_1ae7a1b98a14c452a8ca5d850079435e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::image_memory_barrier</definition>
        <argsstring>(VkCommandBuffer &amp;p_command_buffer, VkImage &amp;p_image, VkFormat p_format, VkImageLayout p_old, VkImageLayout p_new)</argsstring>
        <name>image_memory_barrier</name>
        <qualifiedname>atlas::vk::image_memory_barrier</qualifiedname>
        <param>
          <type>VkCommandBuffer &amp;</type>
          <declname>p_command_buffer</declname>
        </param>
        <param>
          <type>VkImage &amp;</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_old</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>p_new</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="117" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="117" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1aec1f4da42b4c79235c7c01d950d609e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::queue_submit</definition>
        <argsstring>(const VkQueue &amp;p_queue_handle, const std::span&lt; VkCommandBuffer &gt; &amp;p_commands)</argsstring>
        <name>queue_submit</name>
        <qualifiedname>atlas::vk::queue_submit</qualifiedname>
        <param>
          <type>const VkQueue &amp;</type>
          <declname>p_queue_handle</declname>
        </param>
        <param>
          <type>const std::span&lt; VkCommandBuffer &gt; &amp;</type>
          <declname>p_commands</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="124" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="124" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="vk__types_8hpp_1a4559e7c947e1d906db6566b5a09719b7" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>command_buffer_levels</name>
        <qualifiedname>atlas::vk::command_buffer_levels</qualifiedname>
        <enumvalue id="vk__types_8hpp_1a4559e7c947e1d906db6566b5a09719b7a6379e6deb346840bfcaa25daa5561ae7" prot="public">
          <name>primary</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a4559e7c947e1d906db6566b5a09719b7a1ffb2bf594e799a46555707550073797" prot="public">
          <name>secondary</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vk__types_8hpp_1a4559e7c947e1d906db6566b5a09719b7a8f0a61309b996e93f8b14045b960522d" prot="public">
          <name>max_enum</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Primary</parametername>
</parameternamelist>
<parameterdescription>
<para>submission: immediately to vulkan queue for executing on device execution: vkQueueSubmit primarily submits primary command buffers</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Seconary</parametername>
</parameternamelist>
<parameterdescription>
<para>submission: Cannot be submitted directly to vulkan queue execution: Indirect execution by being called from primary command buffers using <computeroutput>vkCmdExecuteCommands</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
When executed within render-pass instance, they inherit renderpass/subpass state from primary command buffer</para>
<para>Can be allocated and recorded in parallel, which can leverage devices that support multi-core processing</para>
<para>Have independent lifetimes that can be managed independently of primary command buffers, allowing for more flexible resource management </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" line="27" column="5" bodyfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/vk_types.hpp" bodystart="27" bodyend="31"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="helper__functions_8hpp_1ad68edd7ad1452f29a116dc5ff358a294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::vk_check</definition>
        <argsstring>(const VkResult &amp;p_result, const std::string &amp;p_name, const std::source_location &amp;p_source=std::source_location::current())</argsstring>
        <name>vk_check</name>
        <qualifiedname>atlas::vk::vk_check</qualifiedname>
        <param>
          <type>const VkResult &amp;</type>
          <declname>p_result</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>p_name</declname>
        </param>
        <param>
          <type>const std::source_location &amp;</type>
          <declname>p_source</declname>
          <defval>std::source_location::current()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_result</parametername>
</parameternamelist>
<parameterdescription>
<para>checks if the result of a vulkan handler was created correctly </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_name</parametername>
</parameternamelist>
<parameterdescription>
<para>used for debugging of which handler failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_source</parametername>
</parameternamelist>
<parameterdescription>
<para>is the location of the call-site that invoked vk_check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="17" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a6db314099bd9386431f8f7c4c45a8501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::vk_check_format</definition>
        <argsstring>(VkFormat p_format, const char *p_filepath, uint32_t p_line, const char *p_function_name)</argsstring>
        <name>vk_check_format</name>
        <qualifiedname>atlas::vk::vk_check_format</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>p_filepath</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>p_function_name</declname>
        </param>
        <briefdescription>
<para>Checks for valid <computeroutput>VkFormat</computeroutput> specified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="23" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a0e74e3118efe363c4fdc9baa86992b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkFormat</type>
        <definition>VkFormat atlas::vk::to_vk_format</definition>
        <argsstring>(const format &amp;p_format)</argsstring>
        <name>to_vk_format</name>
        <qualifiedname>atlas::vk::to_vk_format</qualifiedname>
        <param>
          <type>const format &amp;</type>
          <declname>p_format</declname>
        </param>
        <briefdescription>
<para>converts high-level specifications of format to VkFormat </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="29" column="14" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="29" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a08ec44db31b749a277487b40af262458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageView</type>
        <definition>VkImageView atlas::vk::create_image_view</definition>
        <argsstring>(const VkImage &amp;p_image, VkFormat p_format, VkImageAspectFlags p_aspect_flags)</argsstring>
        <name>create_image_view</name>
        <qualifiedname>atlas::vk::create_image_view</qualifiedname>
        <param>
          <type>const VkImage &amp;</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>p_aspect_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_image</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image handler to create a view handler from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_format</parametername>
</parameternamelist>
<parameterdescription>
<para>specify format to create the VkImageView handler from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_aspect_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>to specify the data this VkImageView handler will contain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="37" column="17" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1ab0fae4d6697c334fa941dd3b8374bd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageView</type>
        <definition>VkImageView atlas::vk::create_image_view</definition>
        <argsstring>(const VkDevice &amp;p_driver, VkImage p_image, VkSurfaceFormatKHR p_surface_format, VkImageAspectFlags p_aspect_flags, VkImageViewType p_view_t, uint32_t p_layer_count, uint32_t p_mip_level=1)</argsstring>
        <name>create_image_view</name>
        <qualifiedname>atlas::vk::create_image_view</qualifiedname>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>p_driver</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkSurfaceFormatKHR</type>
          <declname>p_surface_format</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>p_aspect_flags</declname>
        </param>
        <param>
          <type>VkImageViewType</type>
          <declname>p_view_t</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_layer_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_mip_level</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new VkImageView handler object </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_driver</parametername>
</parameternamelist>
<parameterdescription>
<para>the driver to create the new handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_surface_format</parametername>
</parameternamelist>
<parameterdescription>
<para>specify a surface format to create the VkImageView handler with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_aspect_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>to specify what kind of aspect of data this VkImageView will contain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mip_level</parametername>
</parameternamelist>
<parameterdescription>
<para>default to 1; used to set mip levels if required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="50" column="17" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a4113e53aed38a67a39c2192bd690603f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatlas_1_1vk_1_1vk__image" kindref="compound">vk_image</ref></type>
        <definition>vk_image atlas::vk::create_image2d</definition>
        <argsstring>(uint32_t p_width, uint32_t p_height, VkFormat p_format, VkImageUsageFlags p_usage, VkMemoryPropertyFlagBits p_property)</argsstring>
        <name>create_image2d</name>
        <qualifiedname>atlas::vk::create_image2d</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>p_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_height</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <param>
          <type>VkImageUsageFlags</type>
          <declname>p_usage</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlagBits</type>
          <declname>p_property</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="structatlas_1_1vk_1_1vk__image" kindref="compound">vk_image</ref> which contains the VkImage and VkImage handlers with image 2D specifications. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="60" column="14" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="60" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1aa2fb9beb6333f3c698a3e4bce17b5188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkSampler</type>
        <definition>VkSampler atlas::vk::create_sampler</definition>
        <argsstring>(const vk_filter_range &amp;p_range, VkSamplerAddressMode p_address_mode)</argsstring>
        <name>create_sampler</name>
        <qualifiedname>atlas::vk::create_sampler</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__filter__range" kindref="compound">vk_filter_range</ref> &amp;</type>
          <declname>p_range</declname>
        </param>
        <param>
          <type>VkSamplerAddressMode</type>
          <declname>p_address_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="66" column="15" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="66" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a8739f6f33610963456d5b404eef2b611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatlas_1_1vk_1_1vk__image__handle" kindref="compound">vk_image_handle</ref></type>
        <definition>vk_image_handle atlas::vk::create_image2d</definition>
        <argsstring>(const VkDevice &amp;p_driver, const image_extent &amp;p_extent)</argsstring>
        <name>create_image2d</name>
        <qualifiedname>atlas::vk::create_image2d</qualifiedname>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>p_driver</declname>
        </param>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1image__extent" kindref="compound">image_extent</ref> &amp;</type>
          <declname>p_extent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_driver</parametername>
</parameternamelist>
<parameterdescription>
<para>current logical device to associate this image creation to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_extent</parametername>
</parameternamelist>
<parameterdescription>
<para>image extent of properties required for creating the image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="75" column="21" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="75" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a1189357279b352bfa0618889b2c5ef0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::free_buffer</definition>
        <argsstring>(const VkDevice &amp;p_driver, vk_buffer &amp;p_buffer)</argsstring>
        <name>free_buffer</name>
        <qualifiedname>atlas::vk::free_buffer</qualifiedname>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>p_driver</declname>
        </param>
        <param>
          <type><ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="78" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a42e0fd1a0de7f8f3d18e11c104743b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::free_image</definition>
        <argsstring>(const VkDevice &amp;p_driver, vk_image &amp;p_image)</argsstring>
        <name>free_image</name>
        <qualifiedname>atlas::vk::free_image</qualifiedname>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>p_driver</declname>
        </param>
        <param>
          <type><ref refid="structatlas_1_1vk_1_1vk__image" kindref="compound">vk_image</ref> &amp;</type>
          <declname>p_image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="80" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a9d5de1f499fe5551773a0da37602fe85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderStageFlags</type>
        <definition>VkShaderStageFlags atlas::vk::to_vk_shader_stage</definition>
        <argsstring>(const shader_stage &amp;p_stage)</argsstring>
        <name>to_vk_shader_stage</name>
        <qualifiedname>atlas::vk::to_vk_shader_stage</qualifiedname>
        <param>
          <type>const shader_stage &amp;</type>
          <declname>p_stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="82" column="24" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="82" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1abfe26b4a4136633074a3f2f2fa30073c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderStageFlagBits</type>
        <definition>VkShaderStageFlagBits atlas::vk::to_vk_shader_stage_bits</definition>
        <argsstring>(const shader_stage &amp;p_stage)</argsstring>
        <name>to_vk_shader_stage_bits</name>
        <qualifiedname>atlas::vk::to_vk_shader_stage_bits</qualifiedname>
        <param>
          <type>const shader_stage &amp;</type>
          <declname>p_stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="84" column="27" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="84" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1ac0a9b33c420f7fd3d45c4c28e25221a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref></type>
        <definition>vk_buffer atlas::vk::create_uniform_buffer</definition>
        <argsstring>(uint32_t p_size)</argsstring>
        <name>create_uniform_buffer</name>
        <qualifiedname>atlas::vk::create_uniform_buffer</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>p_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vulkan buffer handler that is initialized as a uniform buffer handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="88" column="15" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="88" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a1bc31441e98c346cb0928357ae633d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDescriptorType</type>
        <definition>VkDescriptorType atlas::vk::to_vk_descriptor_type</definition>
        <argsstring>(const buffer &amp;p_type)</argsstring>
        <name>to_vk_descriptor_type</name>
        <qualifiedname>atlas::vk::to_vk_descriptor_type</qualifiedname>
        <param>
          <type>const buffer &amp;</type>
          <declname>p_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the VkDescriptorType that represents a &quot;handle&quot; the shader resource is acecssing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="92" column="22" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="92" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a5c72d30be5001b87e1f8ff50c2be4f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBufferLevel</type>
        <definition>VkCommandBufferLevel atlas::vk::to_vk_command_buffer_level</definition>
        <argsstring>(const command_buffer_levels &amp;p_levels)</argsstring>
        <name>to_vk_command_buffer_level</name>
        <qualifiedname>atlas::vk::to_vk_command_buffer_level</qualifiedname>
        <param>
          <type>const command_buffer_levels &amp;</type>
          <declname>p_levels</declname>
        </param>
        <briefdescription>
<para>Conversion function that returns VkCommandBufferLevel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="95" column="26" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="95" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a48c72ae92cc3b1a579e5d697a61904c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkSemaphore</type>
        <definition>VkSemaphore atlas::vk::create_semaphore</definition>
        <argsstring>(const VkDevice &amp;p_driver)</argsstring>
        <name>create_semaphore</name>
        <qualifiedname>atlas::vk::create_semaphore</qualifiedname>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>p_driver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new semaphore handle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="99" column="17" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="99" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a2f4dea0c7f9537bcd4cfc0e00ed23fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref></type>
        <definition>vk_buffer atlas::vk::create_buffer</definition>
        <argsstring>(const vk_buffer_info &amp;p_info)</argsstring>
        <name>create_buffer</name>
        <qualifiedname>atlas::vk::create_buffer</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer__info" kindref="compound">vk_buffer_info</ref> &amp;</type>
          <declname>p_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="102" column="15" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="102" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a0293556eaf96d5015c61f6b43a10f475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool atlas::vk::has_stencil_attachment</definition>
        <argsstring>(VkFormat p_format)</argsstring>
        <name>has_stencil_attachment</name>
        <qualifiedname>atlas::vk::has_stencil_attachment</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <briefdescription>
<para>Validate if the format specified is a stencil attachment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="107" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a187641b7008a46052f6100349dbf1f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string atlas::vk::vk_present_mode_to_string</definition>
        <argsstring>(VkPresentModeKHR p_present_mode)</argsstring>
        <name>vk_present_mode_to_string</name>
        <qualifiedname>atlas::vk::vk_present_mode_to_string</qualifiedname>
        <param>
          <type>VkPresentModeKHR</type>
          <declname>p_present_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>stringified version of the <computeroutput>VkPresentModeKHR</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="110" column="17" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1abc467a8f1e3b8ac02b7cf4da39579e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string atlas::vk::vk_format_to_string</definition>
        <argsstring>(VkFormat p_format)</argsstring>
        <name>vk_format_to_string</name>
        <qualifiedname>atlas::vk::vk_format_to_string</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>stringified version of the <computeroutput>VkFormat</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="113" column="17" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="113" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a118cd3af1b818905e6f45c0a09a3fc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atlas::vk::bytes_per_texture_format</definition>
        <argsstring>(VkFormat p_format)</argsstring>
        <name>bytes_per_texture_format</name>
        <qualifiedname>atlas::vk::bytes_per_texture_format</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>p_format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the bytes of the texture format specified by the parameter &quot;VkFormat&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="117" column="9" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="117" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1ac0d77f80bbc56aa3e1b5f73df84d2d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkPresentModeKHR</type>
        <definition>VkPresentModeKHR atlas::vk::select_compatible_present_mode</definition>
        <argsstring>(const VkPresentModeKHR &amp;p_request, const std::span&lt; VkPresentModeKHR &gt; &amp;p_modes)</argsstring>
        <name>select_compatible_present_mode</name>
        <qualifiedname>atlas::vk::select_compatible_present_mode</qualifiedname>
        <param>
          <type>const VkPresentModeKHR &amp;</type>
          <declname>p_request</declname>
        </param>
        <param>
          <type>const std::span&lt; VkPresentModeKHR &gt; &amp;</type>
          <declname>p_modes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>VkPresentModeKHR</computeroutput> by selecting the current compatiable presentation modes available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="121" column="22" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="121" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a4a02981f1354efb67fddc7431852b9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t atlas::vk::select_images_size</definition>
        <argsstring>(const VkSurfaceCapabilitiesKHR &amp;p_surface_capabilities)</argsstring>
        <name>select_images_size</name>
        <qualifiedname>atlas::vk::select_images_size</qualifiedname>
        <param>
          <type>const VkSurfaceCapabilitiesKHR &amp;</type>
          <declname>p_surface_capabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the image size based on the capabilities of the vulkan <computeroutput>VkSurfaceKHR</computeroutput> that is supported </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="127" column="14" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="127" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a10f8580c0840b0bd89587e1d15810830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkPipelineBindPoint</type>
        <definition>VkPipelineBindPoint atlas::vk::to_vk_pipeline_bind_point</definition>
        <argsstring>(const pipeline_bind_point &amp;p_bind_point)</argsstring>
        <name>to_vk_pipeline_bind_point</name>
        <qualifiedname>atlas::vk::to_vk_pipeline_bind_point</qualifiedname>
        <param>
          <type>const pipeline_bind_point &amp;</type>
          <declname>p_bind_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="130" column="25" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="130" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1ab093fa7558f7fe4a18c0f14f4fa7b2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkAttachmentLoadOp</type>
        <definition>VkAttachmentLoadOp atlas::vk::to_vk_attachment_load</definition>
        <argsstring>(attachment_load p_attachment_type)</argsstring>
        <name>to_vk_attachment_load</name>
        <qualifiedname>atlas::vk::to_vk_attachment_load</qualifiedname>
        <param>
          <type>attachment_load</type>
          <declname>p_attachment_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="133" column="24" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="133" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a1bf96ea35337078bb997fb3b6ded3792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkAttachmentStoreOp</type>
        <definition>VkAttachmentStoreOp atlas::vk::to_vk_attachment_store</definition>
        <argsstring>(const attachment_store &amp;p_attachment_type)</argsstring>
        <name>to_vk_attachment_store</name>
        <qualifiedname>atlas::vk::to_vk_attachment_store</qualifiedname>
        <param>
          <type>const attachment_store &amp;</type>
          <declname>p_attachment_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="135" column="25" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="135" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a8992ee554fd9ad8b215b1733ccae7d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkSampleCountFlagBits</type>
        <definition>VkSampleCountFlagBits atlas::vk::to_vk_sample_count_bits</definition>
        <argsstring>(const sample_bit &amp;p_sample_count_bit)</argsstring>
        <name>to_vk_sample_count_bits</name>
        <qualifiedname>atlas::vk::to_vk_sample_count_bits</qualifiedname>
        <param>
          <type>const sample_bit &amp;</type>
          <declname>p_sample_count_bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="138" column="27" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="138" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a789e1d43430fa3c9553ac1904198909c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageLayout</type>
        <definition>VkImageLayout atlas::vk::to_vk_image_layout</definition>
        <argsstring>(const image_layout &amp;p_layout)</argsstring>
        <name>to_vk_image_layout</name>
        <qualifiedname>atlas::vk::to_vk_image_layout</qualifiedname>
        <param>
          <type>const image_layout &amp;</type>
          <declname>p_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="141" column="19" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="141" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="helper__functions_8hpp_1a0ad8bae93f43c35e78679eada1ea685c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkVertexInputRate</type>
        <definition>VkVertexInputRate atlas::vk::to_vk_input_rate</definition>
        <argsstring>(const input_rate &amp;p_input_rate)</argsstring>
        <name>to_vk_input_rate</name>
        <qualifiedname>atlas::vk::to_vk_input_rate</qualifiedname>
        <param>
          <type>const input_rate &amp;</type>
          <declname>p_input_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="143" column="23" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" declline="143" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a5a4e7088a1d6dac550013a4274ea6ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::begin_command_buffer</definition>
        <argsstring>(const VkCommandBuffer &amp;p_command_buffer, VkCommandBufferUsageFlags p_usage_flags)</argsstring>
        <name>begin_command_buffer</name>
        <qualifiedname>atlas::vk::begin_command_buffer</qualifiedname>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>p_command_buffer</declname>
        </param>
        <param>
          <type>VkCommandBufferUsageFlags</type>
          <declname>p_usage_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="9" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="9" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1aec14112642d944a7b0b67987abed9f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::end_command_buffer</definition>
        <argsstring>(const VkCommandBuffer &amp;p_command_buffer)</argsstring>
        <name>end_command_buffer</name>
        <qualifiedname>atlas::vk::end_command_buffer</qualifiedname>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>p_command_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="12" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="12" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1abb5c19c17335699bd20aa9836b2f63a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandPool</type>
        <definition>VkCommandPool atlas::vk::create_single_command_pool</definition>
        <argsstring>()</argsstring>
        <name>create_single_command_pool</name>
        <qualifiedname>atlas::vk::create_single_command_pool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="14" column="19" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="14" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1ad82dab5d21e56c59caf55d7fe2aa86ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBuffer</type>
        <definition>VkCommandBuffer atlas::vk::create_single_command_buffer</definition>
        <argsstring>(const VkCommandPool &amp;p_command_pool)</argsstring>
        <name>create_single_command_buffer</name>
        <qualifiedname>atlas::vk::create_single_command_buffer</qualifiedname>
        <param>
          <type>const VkCommandPool &amp;</type>
          <declname>p_command_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="16" column="21" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="16" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a0f4302b8672e4ae69e40e42ecbbae937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::copy</definition>
        <argsstring>(vk_command_buffer &amp;p_command_buffer, VkImage &amp;p_image, VkBuffer &amp;p_buffer, uint32_t p_width, uint32_t p_height)</argsstring>
        <name>copy</name>
        <qualifiedname>atlas::vk::copy</qualifiedname>
        <param>
          <type><ref refid="classatlas_1_1vk_1_1vk__command__buffer" kindref="compound">vk_command_buffer</ref> &amp;</type>
          <declname>p_command_buffer</declname>
        </param>
        <param>
          <type>VkImage &amp;</type>
          <declname>p_image</declname>
        </param>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="19" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="19" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a925115d7db5a15aab630eaa8272795cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::copy</definition>
        <argsstring>(const vk_buffer &amp;p_src, const vk_buffer &amp;p_dst, size_t p_size_of_bytes)</argsstring>
        <name>copy</name>
        <qualifiedname>atlas::vk::copy</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_src</declname>
        </param>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p_size_of_bytes</declname>
        </param>
        <briefdescription>
<para>Copies from one buffer source into another buffer source with a specific size of bytes to be stored the buffer that is being copied to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="27" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="27" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a4d1e03a589d9a6aa54a90241fb88d454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::write</definition>
        <argsstring>(const vk_buffer &amp;p_buffer, const void *p_data, size_t p_size_in_bytes)</argsstring>
        <name>write</name>
        <qualifiedname>atlas::vk::write</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>p_size_in_bytes</declname>
        </param>
        <briefdescription>
<para>maps the current buffer handler to some block of memory and the byte size for that chunk </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="35" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1acb61b3f1476a7cdb48587a60af0dd795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::write</definition>
        <argsstring>(const vk_buffer &amp;p_buffer, const std::span&lt; uint32_t &gt; &amp;p_in_buffer)</argsstring>
        <name>write</name>
        <qualifiedname>atlas::vk::write</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>const std::span&lt; uint32_t &gt; &amp;</type>
          <declname>p_in_buffer</declname>
        </param>
        <briefdescription>
<para>Maps buffer handler to chunk of data of type, that is std::span&lt;uint32_t&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="43" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a25fb901b52b93cb63001bcd784614a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atlas::vk::write</definition>
        <argsstring>(const vk_buffer &amp;p_buffer, const std::span&lt; vertex_input &gt; &amp;p_in_buffer)</argsstring>
        <name>write</name>
        <qualifiedname>atlas::vk::write</qualifiedname>
        <param>
          <type>const <ref refid="structatlas_1_1vk_1_1vk__buffer" kindref="compound">vk_buffer</ref> &amp;</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>const std::span&lt; <ref refid="structatlas_1_1vk_1_1vertex__input" kindref="compound">vertex_input</ref> &gt; &amp;</type>
          <declname>p_in_buffer</declname>
        </param>
        <briefdescription>
<para>Maps buffer handler to data chunks that contain vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" line="49" column="10" declfile="TheAtlasEngine/atlas/drivers/vulkan-cpp/utilties/utils.hpp" declline="49" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="TheAtlasEngine/atlas/drivers/vulkan-cpp/helper_functions.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
