<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structatlas_1_1vector2" kind="struct" language="C++" prot="public">
    <compoundname>atlas::vector2</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>The reason why we do this is because if we have an arbitrary type of vec2, vec3, vec4. This allows us to still utilize glm::vec3 as our default vec3 types </para>
</simplesect>
<simplesect kind="note"><para>The computation would still be of how you can do math can be implemented by the math library of your choice, the only thing you just to is make those changes at compile-time to glm::vec2, glm::vec3, or even glm::vec4. </para>
</simplesect>
<simplesect kind="note"><para>Hence why you override these metadata classes for specifically vec2, 3, and 4</para>
</simplesect>
<simplesect kind="note"><para>By doing this we can let the default we define be utilizing glm&apos;s mathematical data types. Then letting users define their own customizable types if they choose to utilize a different mathematical type </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="TheAtlasEngine/atlas/core/math/types.hpp" line="47" column="5" bodyfile="TheAtlasEngine/atlas/core/math/types.hpp" bodystart="47" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
