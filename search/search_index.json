{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe1 HomeWelcome to Engine3D","text":""},{"location":"#overview","title":"Overview","text":"<p>Engine3D is a cross-platform 3D game engine. That strives to be powerful with no restrictions to the user. Allowing to be used for educational, creative, and commerical purpose games.</p> <p>Engine3D's design rules should be:</p> <ol> <li>Portable and Cross-platform</li> <li>Easy to Build</li> <li>Graphics API-agnostic Rendering</li> <li>Safe, Reliable, and Testable or can be Tested</li> </ol>"},{"location":"about/","title":"About","text":""},{"location":"about/#engine3d","title":"Engine3D","text":"<p>Engine3D is an interactive 3D cross-platform application - otherwise a game engine. Engine3D was a project that I had started towards the end of 2023, developed by Aaron (SpinnerX). Deciding on this project to become open-source starting Fall 2024. </p> <p>Engine3D-Dev is the organization that helps maintain the Engine3D project, working to build engine3d to enable users to make commercialized games, artwork for assets, animations, and other forms of engine capabilities. Aaron created Engine3D for students who are passionate about both making games and interested in being part of a community in developing a game engine. Where you can make commercialized games using our internal toolings that Engine3D would provide.</p>"},{"location":"about/#why-make-a-game-engine-what-started-this-project","title":"Why make a Game Engine? What started this project?","text":"<p>To describe simply: because of having a passion for engine development and the curiosity to get better at designing APIs architecturally, thinking outside the box.</p> <p>To explain further, Aaron started this project building a game engine for a few reasons: passion creativity, and curiosity in how various technologies operate in an engine. This is because when looking at a game engine. There is a wide variety of subsystems that are involved to making an engine work. Meaning there is always room to continue learning and growing from both technical and design standpoints.</p>"},{"location":"about/#plans-for-the-future","title":"Plans for the future","text":"<ul> <li> <p>Continue developing for Engine3D to build very interesting projects.</p> </li> <li> <p>Open-source project for users and developers to have a tool to develop games with familiar API.</p> </li> <li> <p>Develop commercialized games that can be used to export in game jams having a sense of satisfaction on a project they know they've worked on.</p> </li> </ul>"},{"location":"getting_started/","title":"\ud83d\udef8 Getting Started","text":""},{"location":"getting_started/#prerequisites","title":"\u2705 Prerequisites","text":"<p>These are needed before working to get engine3d building successfully on your platform.</p> <ul> <li><code>python</code>: 3.10 or above</li> <li><code>conan</code>: 2.2.0 or above</li> <li><code>llvm</code>: 17 or above</li> <li><code>make</code>: CMake downloaded using conan to build Engine3D</li> <li><code>git</code>: (only needs to be installed via installer on Windows)</li> <li><code>Visual Studio</code>: (Installing it just for getting C++ Windows SDK to work)</li> </ul> WindowsUbuntuMac OS <p>Tip</p> <p>Adding it as an option for future change to using DirectX when you run on Windows.</p> <p>Info</p> <p>Needs to install Visual Studio installed because it comes with C++ Windows SDK kits</p> <p>Until there is an easier way of installing the C++ Windows SDK Kit for the Windows platform.</p> <p>It is recommended to use Choco for an easy installatoin process on Windows.</p> <p>To install <code>choco</code>, open powershell with admin access and run the following command in your terminal (powershell must be admin):</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> <p>Tip</p> <p>If <code>choco</code> command does not work after running this script try closing and reopening powershell again. When <code>choco</code> prompts you to run install scripts from the commands below, enter <code>all</code> so it can install everything.</p> <p>Install <code>git</code> (powershell must be admin):</p> <pre><code>choco install git\n</code></pre> <p>Install <code>python</code> (powershell must be admin):</p> <pre><code>choco install python --version=3.12.0\n</code></pre> <p>Install <code>llvm</code> (powershell must be admin):</p> <pre><code>choco install llvm\n</code></pre> <p>Install <code>conan</code> (powershell must be admin) <pre><code>python -m pip install -U \"conan&gt;=2.2.2\"\n</code></pre></p> <p>Install cmake <pre><code>choco install cmake\n</code></pre></p> <p>Install mingw <pre><code>choco install mingw\n</code></pre></p> <p>Installing Vulkan's installer from the terminal. (in Powershell) <pre><code>Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/1.3.290.0/windows/VulkanSDK-1.3.290.0-Installer.exe -OutFile $env:USERPROFILE\\Downloads\\VulkanSDK-1.3.290.0-Installer.exe\n</code></pre></p> <p>During installation select the <code>SDK 32-bit Core Components</code> as shown</p> <p></p> <p>```</p> <p>Install wget if it isn't already on your system</p> <p><code>sudo apt-get install wget</code></p> <p>Install the latest version of <code>llvm</code></p> <pre><code>wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh\n</code></pre> <p>Info</p> <p>If your using 20.04, you have to upgrade Python to 3.10</p> <pre><code>sudo apt update\nsudo apt install software-properties-common -y\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install Python3.10\n</code></pre> <p>Installing Conan <pre><code>python -m pip install -U \"conan&gt;=2.2.2\"\n</code></pre></p> <p>On Linux vulkan does not need </p> <p>Install Homebrew:</p> <p><pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> Install latest version of Python &amp;&amp; llvm:</p> <pre><code>brew install python\nbrew install llvm@17\n</code></pre> <p>Install conan:</p> <p>Tip</p> <p>If using the conan command does not work after pip installing.</p> <p>Type the <code>brew install conan</code> command, instead.</p> <pre><code>python3 -m pip install \"conan&gt;=2.2.2\"\n</code></pre> <p>Make <code>clang-tidy</code> available on the command line:</p> <pre><code>sudo ln -s $(brew --prefix llvm)/bin/clang-tidy /usr/local/bin/\n</code></pre> <p>Install Rosetta (only required for M1 macs):</p> <pre><code>/usr/sbin/softwareupdate --install-rosetta --agree-to-license\n</code></pre> <pre><code>curl -O https://sdk.lunarg.com/sdk/download/1.3.290.0/mac/vulkansdk-macos-1.3.290.0.dmg ${HOME}/Downloads\n</code></pre> <p>During the installation select the checkbox's shown below.</p> <p></p> <p>Once vulkan's installed apply the following export commands into your mac's <code>.zshrc</code> file</p> <pre><code>    export VULKAN_SDK=\"${HOME}/VulkanSDK/1.3.290.0/macOS\"\n    export DYLD_LIBRARY_PATH=\"${VULKAN_SDK}/lib/libvulkan.1.3.290.dylib\"\n    export VK_ICD_FILENAMES=\"$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json\"\n    export VK_LAYER_PATH=\"$VULKAN_SDK/share/vulkan/explicit_layer.d\"\n</code></pre> <p>Note</p> <p>To check if vulkan is installed, you should be able to type the following command <code>vkvia</code></p> <p>This runs the vulkan basic cube program validating vulkan's been installed correctly.</p> <p>After adding these exports, refresh your <code>.zshrc</code> by doing <code>source ~/.zshrc</code></p>"},{"location":"getting_started/#setting-up-conan","title":"Setting up Conan","text":"<p>Setting up a conan profile for your specific platforms.</p> WindowsX86 LinuxM1 Mac <p>If you are on an x86 architecture for Windows.</p> <pre><code>conan config install -sf profiles/x86_64/Windows/ -tf profiles https://github.com/engine3d-dev/conan-config.git\n</code></pre> <p>If you are on a linux platform that uses an x86 architecture.</p> <pre><code>conan config install -sf profiles/x86_64/linux/ -tf profiles https://github.com/engine3d-dev/conan-config.git\n</code></pre> <p>If you are on an M1 Mac OS.</p> <pre><code>conan config install -sf profiles/armv8/mac/ -tf profiles https://github.com/engine3d-dev/conan-config.git\n</code></pre>"},{"location":"getting_started/#extracting-engine3d-conan-packages","title":"Extracting engine3d conan packages","text":"<p>Add the engine3d-conan repository to your system. This repository holds all of the engine3d packages.</p> <pre><code>conan remote add engine3d-conan https://libhal.jfrog.io/artifactory/api/conan/engine3d-conan\n</code></pre>"},{"location":"getting_started/#contributing-to-engine3d","title":"Contributing to Engine3D","text":"<ul> <li> <p>Create a fork of the Engine3D repository. Then clone your fork of the Engine3d repo.</p> </li> <li> <p>Then use conan to build the project.</p> </li> </ul> <p>Tip</p> <p><code>-b missing</code> means that there are missing binaries in your conan cache.</p> <p>Note</p> <p>You only need to do the <code>conan create</code> command once. Then just continue using <code>conan build</code> afterwards.</p> <ul> <li> <p><code>conan create</code> command will install all the dependencies of engine3d, build, and test the project.</p> </li> <li> <p><code>conan build .</code> will build the entire project</p> </li> </ul> <pre><code>git clone https://github.com/&lt;username&gt;/engine3d\ncd engine3d/\n\nconan create . -b missing\n\nconan build .\n</code></pre>"},{"location":"getting_started/#running-editor","title":"Running Editor","text":"<p>The editor executable will be in <code>build/clang-17-x86_64-23-release/Editor/Editor.exe</code></p> <p>You can simply run the editor just by doing <code>.\\build/clang-17-x86_64-23-release/Editor/Editor.exe</code></p> <p>Depending on your current platform the editor executable will be in <code>./build/&lt;arch-Release&gt;/Editor/Editor.exe</code></p>"},{"location":"getting_started/#different-build-types","title":"Different Build Types","text":"<p>There are two different build types that you can build engine3d in, <code>Release</code> and <code>Debug</code>.</p> <p><code>Release</code> will be turning on optimization and making your code size.</p> <p><code>Debug</code> is much slower than <code>Release</code>. Not recommended because used for testing and enabling debugging information.</p>"},{"location":"summary/","title":"Summary","text":"<ul> <li>home</li> <li>About</li> <li>Getting Started</li> <li>[API]</li> </ul>"}]}